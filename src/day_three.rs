pub fn get_trees_encountered(slope: (usize, usize), map: &Vec<Vec<char>>) -> usize {
    let height = map.len();
    let width = map[0].len();
    let (right, down) = slope;

    (0..height)
        .step_by(down)
        .enumerate()
        .filter(|&(i, idx)| map[idx][(i * right) % width] == '#')
        .count()
}

pub fn get_all_slopes(slopes: Vec<(usize, usize)>, map: Vec<Vec<char>>) -> usize {
    slopes
        .iter()
        .map(|&slope| get_trees_encountered(slope, &map))
        .reduce(|accum, item| accum * item)
        .unwrap()
}

#[cfg(test)]
mod test {
    use super::{get_all_slopes, get_trees_encountered};

    #[test]
    fn test_trees_encountered() {
        let test_map = "..##.........##.........##.........##.........##.........##.......
        #...#...#..#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..
        .#....#..#..#....#..#..#....#..#..#....#..#..#....#..#..#....#..#.
        ..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#
        .#...##..#..#...##..#..#...##..#..#...##..#..#...##..#..#...##..#.
        ..#.##.......#.##.......#.##.......#.##.......#.##.......#.##.....
        .#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#
        .#........#.#........#.#........#.#........#.#........#.#........#
        #.##...#...#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...
        #...##....##...##....##...##....##...##....##...##....##...##....#
        .#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#";

        let map_vector = test_map
            .trim()
            .split('\n')
            .map(|line| line.trim().chars().collect())
            .collect::<Vec<Vec<char>>>();

        assert_eq!(7, get_trees_encountered((3, 1), &map_vector));
    }

    #[test]
    fn test_all_slopes() {
        let test_map = "..##.........##.........##.........##.........##.........##.......
        #...#...#..#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..
        .#....#..#..#....#..#..#....#..#..#....#..#..#....#..#..#....#..#.
        ..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#
        .#...##..#..#...##..#..#...##..#..#...##..#..#...##..#..#...##..#.
        ..#.##.......#.##.......#.##.......#.##.......#.##.......#.##.....
        .#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#
        .#........#.#........#.#........#.#........#.#........#.#........#
        #.##...#...#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...
        #...##....##...##....##...##....##...##....##...##....##...##....#
        .#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#";

        let map_vector = test_map
            .trim()
            .split('\n')
            .map(|line| line.trim().chars().collect())
            .collect::<Vec<Vec<char>>>();

        let slopes: Vec<(usize, usize)> = vec![(1, 1), (3, 1), (5, 1), (7, 1), (1, 2)];
        assert_eq!(336, get_all_slopes(slopes, map_vector));
    }
}
